import logging
import asyncio

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router

from config import BOT_TOKEN
from db import init_db, insert_income, get_last_incomes, get_summary

logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)

# –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ Aiogram 3.x —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç Router
router = Router()

# –ü—Ä–æ—Ü–µ–Ω—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä ‚Äî –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –ø–æ–¥ —Å–µ–±—è)
PERCENTAGES = {
    "daily_expenses": 0.50,
    "investments": 0.20,
    "cushion": 0.20,
    "dream": 0.10
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
pending_data = {}


@router.message(Command("start"))
async def cmd_start(message: Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /start
    """
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üòä –Ø –ø–æ–º–æ–≥—É —É—á–µ—Å—Ç—å —Ç–≤–æ–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–°–£–ú–ú–ê</b> <i>–ò–°–¢–û–ß–ù–ò–ö</i>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>10000 –ó–∞—Ä–ø–ª–∞—Ç–∞</code> üí∞\n\n"
        "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–¥–∫—É, –Ω–∞–±–µ—Ä–∏ /report üìä"
    )


@router.message(Command("report"))
async def cmd_report(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ /report ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    rows = get_last_incomes(limit=5)
    if not rows:
        await message.answer(
            "–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π üò¢\n"
            "–û—Ç–ø—Ä–∞–≤—å —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>10000 –ü—Ä–æ–¥–∞–∂–∞ –¥–∏–≤–∞–Ω–∞</code>!"
        )
        return

    text_lines = ["<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π:</b>\n"]
    for row in rows:
        created_at, source, total, d_exp, inv, cush, dr = row
        text_lines.append(
            f"üìÜ <i>{created_at}</i>\n"
            f"üîñ –ò—Å—Ç–æ—á–Ω–∏–∫: <b>{source}</b>\n"
            f"üí∞ –°—É–º–º–∞: {round(total, 2)}\n"
            f"    ‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {round(d_exp, 2)}\n"
            f"    ‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {round(inv, 2)}\n"
            f"    ‚Ä¢ –ü–æ–¥—É—à–∫–∞: {round(cush, 2)}\n"
            f"    ‚Ä¢ –ú–µ—á—Ç–∞: {round(dr, 2)}\n"
        )

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_sum, d_sum, i_sum, c_sum, dream_sum = get_summary()
    text_lines.append("<b>–°—É–º–º–∞—Ä–Ω–æ –ø–æ –≤—Å–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è–º:</b> üåü")
    text_lines.append(
        f"üîπ –û–±—â–∞—è —Å—É–º–º–∞: {round(total_sum, 2)}\n"
        f"üîπ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {round(d_sum, 2)}\n"
        f"üîπ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {round(i_sum, 2)}\n"
        f"üîπ –ü–æ–¥—É—à–∫–∞: {round(c_sum, 2)}\n"
        f"üîπ –ú–µ—á—Ç–∞: {round(dream_sum, 2)}"
    )

    await message.answer("\n".join(text_lines))


@router.message()
async def handle_income_message(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è.
    –§–æ—Ä–º–∞—Ç: "<–°–£–ú–ú–ê> <–ò–°–¢–û–ß–ù–ò–ö>"
    """
    text = message.text.strip()
    parts = text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer(
            "–£–ø—Å! üßê –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ <b>—Å—É–º–º—É</b> –∏ <b>–∏—Å—Ç–æ—á–Ω–∏–∫</b> –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>10000 –ó–∞—Ä–ø–ª–∞—Ç–∞</code>."
        )
        return

    amount_str, source = parts
    try:
        amount = float(amount_str)
    except ValueError:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! üòÖ\n–ü—Ä–∏–º–µ—Ä: <code>10000 –ó–∞—Ä–ø–ª–∞—Ç–∞</code>")
        return

    # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    d_expenses = amount * PERCENTAGES["daily_expenses"]
    investments = amount * PERCENTAGES["investments"]
    cushion = amount * PERCENTAGES["cushion"]
    dream = amount * PERCENTAGES["dream"]

    user_id = message.from_user.id
    pending_data[user_id] = {
        "source": source,
        "total_amount": amount,
        "daily_expenses": d_expenses,
        "investments": investments,
        "cushion": cushion,
        "dream": dream
    }

    # Inline-–∫–Ω–æ–ø–∫–∏
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    kb.adjust(2)

    response_text = (
        f"–°—É–º–º–∞: <b>{amount}</b> üí∏\n"
        f"–ò—Å—Ç–æ—á–Ω–∏–∫: <b>{source}</b>\n\n"
        f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {round(d_expenses, 2)}\n"
        f"‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {round(investments, 2)}\n"
        f"‚Ä¢ –ü–æ–¥—É—à–∫–∞: {round(cushion, 2)}\n"
        f"‚Ä¢ –ú–µ—á—Ç–∞: {round(dream, 2)}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–ø–∏—Å—å? ü§î"
    )
    await message.answer(response_text, reply_markup=kb.as_markup())


@router.callback_query(F.data.in_(['confirm', 'cancel']))
async def process_confirm_cancel(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –∏–ª–∏ "–û—Ç–º–µ–Ω–∞".
    """
    user_id = callback.from_user.id
    action = callback.data

    if user_id not in pending_data:
        await callback.message.edit_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ üòÖ")
        await callback.answer()
        return

    data = pending_data[user_id]
    if action == "confirm":
        insert_income(
            source=data["source"],
            total_amount=data["total_amount"],
            daily_expenses=data["daily_expenses"],
            investments=data["investments"],
            cushion=data["cushion"],
            dream=data["dream"]
        )
        await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –í—Å—ë –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É ü•≥")
    else:
        await callback.message.edit_text("–•–æ—Ä–æ—à–æ, –æ—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é üôÖ‚Äç‚ôÇÔ∏è")

    pending_data.pop(user_id, None)
    await callback.answer()


async def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä.
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É (—Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –Ω–µ—Ç)
    init_db()

    # –°–æ–∑–¥–∞—ë–º Dispatcher –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º Router
    dp = Dispatcher()
    dp.include_router(router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
